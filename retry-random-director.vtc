# Gracefully handle backend failures by retrying the request to one of the
# other backends in a random director.
#

# Backend that just serves 503
server s1 {
	rxreq
	txresp -status 503
	expect req.url == "/"
} -start

# Backend that just closes the connection
server s2 {
	rxreq
	expect req.url == "/"
	close
	accept
} -start

# Finally a backend that responds properly
server s3 {
	rxreq
	expect req.url == "/"
	txresp -status 200 -body "Some valid content"
} -start

varnish v1 -vcl {
	vcl 4.0;
	import ${vmod_directors};

	backend s1 {
		.host = "${s1_addr}";
		.port = "${s1_port}";
	}

	backend s2 {
		.host = "${s2_addr}";
		.port = "${s2_port}";
	}

	backend s3 {
		.host = "${s3_addr}";
		.port = "${s3_port}";
	}

	sub vcl_init {
		new d = directors.random();

		# Trying to affect the outcome of the random selection
		# to make the test predictable.
		d.add_backend(s1, 1000000);
		d.add_backend(s2, 10000);
		d.add_backend(s3, 1);
	}

	sub vcl_backend_fetch {
		# Use the director for the backend fetch
		set bereq.backend = d.backend();

		if (bereq.retries > 0) {
			# This is a retry. Need to check which backend that
			# was used previously and then set another one for
			# the retry.
			if (bereq.http.backend == "s1") {
				set bereq.backend = s2;
			}
			if (bereq.http.backend == "s2") {
				set bereq.backend = s3;
			}
			if (bereq.http.backend == "s3") {
				set bereq.backend = s1;
			}
		}
	}

	sub vcl_backend_response {
		# Set some headers that the client can use to verify
		set beresp.http.backend = beresp.backend.name;
		set beresp.http.X-Retried = bereq.retries;

		if (beresp.status == 503) {
			# Not happy with the response. Try again.
			# First store which backend that was just used.
			set bereq.http.backend = beresp.backend.name;
			return(retry);
		}
	}

	sub vcl_backend_error {
		if (beresp.status == 503) {
			# Not happy with the response. Try again.
			# First store which backend that was just used.
			set bereq.http.backend = beresp.backend.name;
			return(retry);
		}
	}
} -start

client c1 {
	txreq -url "/"
	rxresp
	expect resp.status == 200
	expect resp.http.backend == "s3"
	expect resp.http.x-retried == "2"
	expect resp.body == "Some valid content"
} -run
